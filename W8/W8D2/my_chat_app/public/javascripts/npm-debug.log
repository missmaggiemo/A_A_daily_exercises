0 info it worked if it ends with ok
1 verbose cli [ '/opt/local/bin/node',
1 verbose cli   '/opt/local/bin/npm',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'node-static' ]
2 info using npm@1.2.14
3 info using node@v0.8.22
4 verbose read json /opt/local/lib/package.json
5 verbose read json /opt/local/lib/package.json
6 verbose cache add [ 'node-static', null ]
7 verbose cache add name=undefined spec="node-static" args=["node-static",null]
8 verbose parsed url { pathname: 'node-static',
8 verbose parsed url   path: 'node-static',
8 verbose parsed url   href: 'node-static' }
9 silly lockFile 17070c41-node-static node-static
10 verbose lock node-static /Users/appacademy/.npm/17070c41-node-static.lock
11 silly lockFile 17070c41-node-static node-static
12 silly lockFile 17070c41-node-static node-static
13 verbose addNamed [ 'node-static', '' ]
14 verbose addNamed [ null, '' ]
15 silly lockFile 5704b874-node-static node-static@
16 verbose lock node-static@ /Users/appacademy/.npm/5704b874-node-static.lock
17 silly addNameRange { name: 'node-static', range: '', hasData: false }
18 verbose url raw node-static
19 verbose url resolving [ 'https://registry.npmjs.org/', './node-static' ]
20 verbose url resolved https://registry.npmjs.org/node-static
21 info trying registry request attempt 1 at 14:34:59
22 verbose etag "BE0KGGDGU5ELZ9X72IK5RWBJT"
23 http GET https://registry.npmjs.org/node-static
24 http 304 https://registry.npmjs.org/node-static
25 silly registry.get cb [ 304,
25 silly registry.get   { date: 'Tue, 20 May 2014 21:35:00 GMT',
25 silly registry.get     server: 'Apache',
25 silly registry.get     via: '1.1 varnish',
25 silly registry.get     'last-modified': 'Tue, 20 May 2014 21:35:00 GMT',
25 silly registry.get     'cache-control': 'max-age=1',
25 silly registry.get     etag: '"BE0KGGDGU5ELZ9X72IK5RWBJT"',
25 silly registry.get     'x-served-by': 'cache-sv95-SJC3',
25 silly registry.get     'x-cache': 'HIT',
25 silly registry.get     'x-cache-hits': '1',
25 silly registry.get     'x-timer': 'S1400621700.034753799,VS0,VE158',
25 silly registry.get     vary: 'Accept',
25 silly registry.get     'content-length': '0',
25 silly registry.get     'keep-alive': 'timeout=10, max=50',
25 silly registry.get     connection: 'Keep-Alive' } ]
26 verbose etag node-static from cache
27 silly addNameRange number 2 { name: 'node-static', range: '', hasData: true }
28 silly addNameRange versions [ 'node-static',
28 silly addNameRange   [ '0.5.6',
28 silly addNameRange     '0.5.7',
28 silly addNameRange     '0.5.8',
28 silly addNameRange     '0.5.9',
28 silly addNameRange     '0.6.0',
28 silly addNameRange     '0.6.1',
28 silly addNameRange     '0.6.2',
28 silly addNameRange     '0.6.3',
28 silly addNameRange     '0.6.4',
28 silly addNameRange     '0.6.5',
28 silly addNameRange     '0.6.6',
28 silly addNameRange     '0.6.7',
28 silly addNameRange     '0.6.8',
28 silly addNameRange     '0.6.9',
28 silly addNameRange     '0.7.0',
28 silly addNameRange     '0.7.1',
28 silly addNameRange     '0.7.2',
28 silly addNameRange     '0.7.3' ] ]
29 verbose addNamed [ 'node-static', '0.7.3' ]
30 verbose addNamed [ '0.7.3', '0.7.3' ]
31 silly lockFile 41f85348-node-static-0-7-3 node-static@0.7.3
32 verbose lock node-static@0.7.3 /Users/appacademy/.npm/41f85348-node-static-0-7-3.lock
33 verbose read json /Users/appacademy/.npm/node-static/0.7.3/package/package.json
34 silly lockFile 41f85348-node-static-0-7-3 node-static@0.7.3
35 silly lockFile 41f85348-node-static-0-7-3 node-static@0.7.3
36 silly lockFile 5704b874-node-static node-static@
37 silly lockFile 5704b874-node-static node-static@
38 silly resolved [ { name: 'node-static',
38 silly resolved     description: 'simple, compliant file streaming module for node',
38 silly resolved     url: 'http://github.com/cloudhead/node-static',
38 silly resolved     keywords: [ 'http', 'static', 'file', 'server' ],
38 silly resolved     author: { name: 'Alexis Sellier', email: 'self@cloudhead.net' },
38 silly resolved     contributors: [ [Object] ],
38 silly resolved     repository: { type: 'git', url: 'http://github.com/cloudhead/node-static' },
38 silly resolved     main: './lib/node-static',
38 silly resolved     scripts: { test: 'vows --spec --isolate' },
38 silly resolved     bin: { static: 'bin/cli.js' },
38 silly resolved     license: 'MIT',
38 silly resolved     dependencies: { optimist: '>=0.3.4', colors: '>=0.6.0', mime: '>=1.2.9' },
38 silly resolved     devDependencies: { request: 'latest', vows: 'latest' },
38 silly resolved     version: '0.7.3',
38 silly resolved     engines: { node: '>= 0.4.1' },
38 silly resolved     readme: 'node-static\n===========\n\n> a simple, *rfc 2616 compliant* file streaming module for [node](http://nodejs.org)\n\nnode-static has an in-memory file cache, making it highly efficient.\nnode-static understands and supports *conditional GET* and *HEAD* requests.\nnode-static was inspired by some of the other static-file serving modules out there,\nsuch as node-paperboy and antinode.\n\nSynopsis\n--------\n\n    var static = require(\'node-static\');\n\n    //\n    // Create a node-static server instance to serve the \'./public\' folder\n    //\n    var file = new static.Server(\'./public\');\n\n    require(\'http\').createServer(function (request, response) {\n        request.addListener(\'end\', function () {\n            //\n            // Serve files!\n            //\n            file.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\nAPI\n---\n\n### Creating a node-static Server #\n\nCreating a file server instance is as simple as:\n\n    new static.Server();\n\nThis will serve files in the current directory. If you want to serve files in a specific\ndirectory, pass it as the first argument:\n\n    new static.Server(\'./public\');\n\nYou can also specify how long the client is supposed to cache the files node-static serves:\n\n    new static.Server(\'./public\', { cache: 3600 });\n\nThis will set the `Cache-Control` header, telling clients to cache the file for an hour.\nThis is the default setting.\n\n### Serving files under a directory #\n\nTo serve files under a directory, simply call the `serve` method on a `Server` instance, passing it\nthe HTTP request and response object:\n \n    var static = require(\'node-static\');\n\n    var fileServer = new static.Server(\'./public\');\n\n    require(\'http\').createServer(function (request, response) {\n        request.addListener(\'end\', function () {\n            fileServer.serve(request, response);\n        }).resume();\n    }).listen(8080);\n\n### Serving specific files #\n\nIf you want to serve a specific file, like an error page for example, use the `serveFile` method:\n\n    fileServer.serveFile(\'/error.html\', 500, {}, request, response);\n\nThis will serve the `error.html` file, from under the file root directory, with a `500` status code.\nFor example, you could serve an error page, when the initial request wasn\'t found:\n\n    require(\'http\').createServer(function (request, response) {\n        request.addListener(\'end\', function () {\n            fileServer.serve(request, response, function (e, res) {\n                if (e && (e.status === 404)) { // If the file wasn\'t found\n                    fileServer.serveFile(\'/not-found.html\', 404, {}, request, response);\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nMore on intercepting errors bellow.\n\n### Intercepting errors & Listening #\n\nAn optional callback can be passed as last argument, it will be called every time a file\nhas been served successfully, or if there was an error serving the file:\n\n    var static = require(\'node-static\');\n    \n    var fileServer = new static.Server(\'./public\');\n\n    require(\'http\').createServer(function (request, response) {\n        request.addListener(\'end\', function () {\n            fileServer.serve(request, response, function (err, result) {\n                if (err) { // There was an error serving the file\n                    sys.error("Error serving " + request.url + " - " + err.message);\n\n                    // Respond to the client\n                    response.writeHead(err.status, err.headers);\n                    response.end();\n                }\n            });\n        }).resume();\n    }).listen(8080);\n\nNote that if you pass a callback, and there is an error serving the file, node-static\n*will not* respond to the client. This gives you the opportunity to re-route the request,\nor handle it differently.\n\nFor example, you may want to interpret a request as a static request, but if the file isn\'t found,\nsend it to an application.\n\nIf you only want to *listen* for errors, you can use *event listeners*:\n\n    fileServer.serve(request, response).addListener(\'error\', function (err) {\n        sys.error("Error serving " + request.url + " - " + err.message);\n    });\n\nWith this method, you don\'t have to explicitly send the response back, in case of an error.\n\n### Options when creating an instance of `Server` #\n\n#### `cache` #\n\nSets the `Cache-Control` header.\n\nexample: `{ cache: 7200 }`\n\nPassing a number will set the cache duration to that number of seconds.\nPassing `false` will disable the `Cache-Control` header.\n\n> Defaults to `3600`\n\n\n#### `serverInfo` #\n\nSets the `Server` header.\n\nexample: `{ serverInfo: "myserver" }`\n\n> Defaults to `node-static/{version}`\n\n#### `headers` #\n\nSets response headers.\n\nexample: `{ \'X-Hello\': \'World!\' }`\n\n> defaults to `{}`\n\n#### `gzip` #\n\nEnable support for sending compressed responses.  This will enable a check for a\nfile with the same name plus \'.gz\' in the same folder.  If the compressed file is\nfound and the client has indicated support for gzip file transfer, the contents\nof the .gz file will be sent in place of the uncompressed file along with a\nContent-Encoding: gzip header to inform the client the data has been compressed.\n\nexample: `{ gzip: true }`\nexample: `{ gzip: /^\\/text/ }`\n\nPassing `true` will enable this check for all files.\nPassing a RegExp instance will only enable this check if the content-type of the\nrespond would match that RegExp using its test() method.\n\n> Defaults to `false`\n\n\nCommand Line Interface\n----------------------\n\n`node-static` also provides a CLI.\n\n### Installation #\n\n    $ npm install -g node-static\n\n### Example Usage #\n\n    # serve up the current directory\n    $ static\n    serving "." at http://127.0.0.1:8080\n\n    # serve up a different directory\n    $ static public\n    serving "public" at http://127.0.0.1:8080\n\n    # specify additional headers (this one is useful for development)\n    $ static -H \'{"Cache-Control": "no-cache, must-revalidate"}\'\n    serving "." at http://127.0.0.1:8080\n\n    # set cache control max age\n    $ static -c 7200\n    serving "." at http://127.0.0.1:8080\n\n    # show help message, including all options\n    $ static -h\n',
38 silly resolved     readmeFilename: 'README.md',
38 silly resolved     _id: 'node-static@0.7.3',
38 silly resolved     _from: 'node-static@' } ]
39 info install node-static@0.7.3 into /opt/local/lib
40 info installOne node-static@0.7.3
41 verbose from cache /Users/appacademy/.npm/node-static/0.7.3/package/package.json
42 info /opt/local/lib/node_modules/node-static unbuild
43 verbose read json /opt/local/lib/node_modules/node-static/package.json
44 verbose tar unpack /Users/appacademy/.npm/node-static/0.7.3/package.tgz
45 silly lockFile 174abaf3-cal-lib-node-modules-node-static /opt/local/lib/node_modules/node-static
46 verbose lock /opt/local/lib/node_modules/node-static /Users/appacademy/.npm/174abaf3-cal-lib-node-modules-node-static.lock
47 silly lockFile 6705bb8c-pm-node-static-0-7-3-package-tgz /Users/appacademy/.npm/node-static/0.7.3/package.tgz
48 verbose lock /Users/appacademy/.npm/node-static/0.7.3/package.tgz /Users/appacademy/.npm/6705bb8c-pm-node-static-0-7-3-package-tgz.lock
49 silly gunzTarPerm modes [ '755', '644' ]
50 error Error: EACCES, mkdir '/opt/local/lib/node_modules/node-static'
50 error  { [Error: EACCES, mkdir '/opt/local/lib/node_modules/node-static']
50 error   errno: 3,
50 error   code: 'EACCES',
50 error   path: '/opt/local/lib/node_modules/node-static',
50 error   fstream_type: 'Directory',
50 error   fstream_path: '/opt/local/lib/node_modules/node-static',
50 error   fstream_class: 'DirWriter',
50 error   fstream_stack:
50 error    [ 'DirWriter._create (/opt/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23)',
50 error      '/opt/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
50 error      'Object.oncomplete (fs.js:297:15)' ] }
51 error Please try running this command again as root/Administrator.
52 error System Darwin 12.2.1
53 error command "/opt/local/bin/node" "/opt/local/bin/npm" "install" "-g" "node-static"
54 error cwd /Users/appacademy/Desktop/my_chat_app/public/javascripts
55 error node -v v0.8.22
56 error npm -v 1.2.14
57 error path /opt/local/lib/node_modules/node-static
58 error fstream_path /opt/local/lib/node_modules/node-static
59 error fstream_type Directory
60 error fstream_class DirWriter
61 error code EACCES
62 error errno 3
63 error stack Error: EACCES, mkdir '/opt/local/lib/node_modules/node-static'
64 error fstream_stack DirWriter._create (/opt/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23)
64 error fstream_stack /opt/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53
64 error fstream_stack Object.oncomplete (fs.js:297:15)
65 verbose exit [ 3, true ]
